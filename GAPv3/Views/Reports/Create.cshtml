@model GAPv3.Models.Report

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Report</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="card">
            <div class="card-body">
                @Html.HiddenFor(m => m.NormId, new { Value = Model.NormId })
                <div class="form-group row">
                    @Html.LabelFor(model => model.OrganisationId, "OrganisationId", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("OrganisationId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.OrganisationId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="divTable">
            <div class="divTableHeading">
                <div class="divTableRow">
                    <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].NormItem.Order)</div>
                    <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].NormItem.Name)</div>
                    @foreach (var property in Model.ReportValues[1].NormItem.Norm.ReportValueAdditionalItem)
                    {
                        if (property.HaveControl)
                        {
                            <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].Control)</div>
                        }
                        if (property.HaveReason)
                        {
                            <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].Reason)</div>
                        }
                    }
                    <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].Status)</div>
                    <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].Note)</div>
                </div>
            </div>
            <div class="divTableBody">
                @{ var parent = Model.ReportValues; }
                @for (int i = 0; i < Model.ReportValues.Count(); i++)
                {
                    <div class="divTableRow bg-light text-dark">
                        @Html.HiddenFor(m => m.ReportValues[i].NormItemId, new { Value = Model.ReportValues[i].NormItemId })
                        <div class="divTableHead">@Html.DisplayFor(model => model.ReportValues[i].NormItem.Order).</div>
                        <div class="divTableCell">@Html.DisplayFor(model => model.ReportValues[i].NormItem.Name)</div>
                        @foreach (var property in Model.ReportValues[1].NormItem.Norm.ReportValueAdditionalItem)
                        {
                            if (property.HaveControl)
                            {
                                <div class="divTableHead">@Html.HiddenFor(model => model.ReportValues[i].Control)</div>
                            }
                            if (property.HaveReason)
                            {
                                <div class="divTableHead">@Html.HiddenFor(model => model.ReportValues[i].Reason)</div>
                            }
                        }
                        <div class="divTableCell">@Html.HiddenFor(model => model.ReportValues[i].StatusId)</div>
                        <div class="divTableCell">@Html.HiddenFor(model => model.ReportValues[i].Note)</div>
                    </div>
                    var children = Model.ReportValues[i].Children;
                    for (int j = 0; j < children.Count(); j++)
                    {
                        var parentCss = children[j].NormItem.IsItem ? "" : "bg-light text-dark";
                        <div class="divTableRow @parentCss">
                            @Html.HiddenFor(m => m.ReportValues[i].Children[j].NormItemId, new { Value = Model.ReportValues[i].Children[j].NormItemId })
                            <div class="divTableHead">@parent[i].NormItem.Order.@Html.DisplayFor(model => model.ReportValues[i].Children[j].NormItem.Order).</div>
                            <div class="divTableCell">@Html.DisplayFor(model => model.ReportValues[i].Children[j].NormItem.Name)</div>
                            @if (children[j].NormItem.IsItem)
                        {
                            foreach (var property in Model.ReportValues[1].NormItem.Norm.ReportValueAdditionalItem)
                            {
                                if (property.HaveControl)
                                {
                                        <div class="divTableCell">@Html.DropDownListFor(model => model.ReportValues[i].Children[j].ControlId, (SelectList)ViewBag.ControlId, "- Please Select -", htmlAttributes: new { @class = "form-control" })</div>
                                    }
                                    if (property.HaveReason)
                                    {
                                        <div class="divTableCell">@Html.DropDownListFor(model => model.ReportValues[i].Children[j].ReasonId, (SelectList)ViewBag.ReasonId, "- Please Select -", htmlAttributes: new { @class = "form-control" })</div>
                                    }
                                }
                                <div class="divTableCell">@Html.DropDownListFor(model => model.ReportValues[i].Children[j].StatusId, (SelectList)ViewBag.StatusId, "- Please Select -", htmlAttributes: new { @class = "form-control" })</div>
                                <div class="divTableCell">@Html.TextBoxFor(model => model.ReportValues[i].Children[j].Note, new { @class = "form-control" })</div>
                            }
                            else
                            {
                                foreach (var property in Model.ReportValues[1].NormItem.Norm.ReportValueAdditionalItem)
                                 {
                                     if (property.HaveControl)
                                     {
                                         <div class="divTableHead">@Html.HiddenFor(model => model.ReportValues[i].Control)</div>
                                     }
                                     if (property.HaveReason)
                                     {
                                         <div class="divTableHead">@Html.HiddenFor(model => model.ReportValues[i].Reason)</div>
                                     }
                                 }
                                <div class="divTableCell">@Html.HiddenFor(model => model.ReportValues[i].StatusId)</div>
                                <div class="divTableCell">@Html.HiddenFor(model => model.ReportValues[i].Note)</div>
                            }
                        </div>
                        var grandChildren = children[j].Children;
                        for (int k = 0; k < grandChildren.Count(); k++)
                        {
                            <div class="divTableRow">
                                @Html.HiddenFor(m => m.ReportValues[i].Children[j].Children[k].NormItemId, new { Value = Model.ReportValues[i].Children[j].Children[k].NormItemId })
                                <div class="divTableHead">@parent[i].NormItem.Order.@children[j].NormItem.Order.@Html.DisplayFor(model => model.ReportValues[i].Children[j].Children[k].NormItem.Order).</div>
                                <div class="divTableCell">@Html.DisplayFor(model => model.ReportValues[i].Children[j].Children[k].NormItem.Name)</div>
                                @foreach (var property in Model.ReportValues[1].NormItem.Norm.ReportValueAdditionalItem)
                            {
                                if (property.HaveControl)
                                {
                                        <div class="divTableCell">@Html.DropDownListFor(model => model.ReportValues[i].Children[j].Children[k].ControlId, (SelectList)ViewBag.ControlId, "- Please Select -", htmlAttributes: new { @class = "form-control" })</div>
                                    }
                                    if (property.HaveReason)
                                    {
                                        <div class="divTableCell">@Html.DropDownListFor(model => model.ReportValues[i].Children[j].Children[k].ReasonId, (SelectList)ViewBag.ReasonId, "- Please Select -", htmlAttributes: new { @class = "form-control" })</div>
                                    }
                                }
                                <div class="divTableCell">@Html.DropDownListFor(model => model.ReportValues[i].Children[j].Children[k].StatusId, (SelectList)ViewBag.StatusId, "- Please Select -", htmlAttributes: new { @class = "form-control" })</div>
                                <div class="divTableCell">@Html.TextBoxFor(model => model.ReportValues[i].Children[j].Children[k].Note, new { @class = "form-control" })</div>
                            </div>
                        }
                    }
                }
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
                    }

<div>
    @Html.ActionLink("Back to List", "Index", new { id = Model.NormId })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
