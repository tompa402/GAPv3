@model GAPv3.Models.Report

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div>
        <h4>Report</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="card">
            <div class="card-body">
                @Html.HiddenFor(m => m.NormId, new { Value = Model.NormId })
                <div class="form-group row">
                    @Html.LabelFor(model => model.OrganisationId, "OrganisationId", htmlAttributes: new { @class = "col-form-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("OrganisationId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.OrganisationId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "col-form-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        
        <div class="divTable">
            <div class="divTableHeading">
                <div class="divTableRow">
                    <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].NormItem.Order)</div>
                    <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].NormItem.Name)</div>
                    @foreach (var property in Model.ReportValues[1].NormItem.Norm.ReportValueAdditionalItem)
                    {
                        if (property.HaveControl)
                        {
                            <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].Control)</div>
                        }
                        if (property.HaveReason)
                        {
                            <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].Reason)</div>
                        }
                    }
                    <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].Status)</div>
                    <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].Note)</div>
                </div>
            </div>
        
            <div class="divTableBody">
                @for (int i = 0; i < Model.ReportValues.Count(); i++)
                {
                    @Html.EditorFor(model => model.ReportValues[i], "_ReportValue")

                    for (int j = 0; j < Model.ReportValues[i].Children.Count(); j++)
                    {
                        @Html.EditorFor(model => model.ReportValues[i].Children[j], "_ReportValue")

                        for (int k = 0; k < Model.ReportValues[i].Children[j].Children.Count(); k++)
                        {
                            @Html.EditorFor(model => model.ReportValues[i].Children[j].Children[k], "_ReportValue")
                        }
                    }
                }
            </div>

        </div>


        

        <div class="form-group">
            <div class="col-md-10">
                <input type="submit" value="Create" class="btn btn-success" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", new { id = Model.NormId })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
