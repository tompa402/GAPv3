@model GAPv3.Models.Report

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<th>
    <h4>Report</h4>
    <hr />
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">@Html.DisplayFor(model => model.Name)</h5>
            <h6 class="card-subtitle mb-2 text-muted">@Html.DisplayFor(model => model.Norm.Name)</h6>
            <h6 class="card-subtitle mb-2 text-muted">@Html.DisplayFor(model => model.Organisation.Name)</h6>
            <p class="card-text">
                <!-- TODO: get data from database -->
                Ovi korisnici mogu ažurirati:
                <span class="badge badge-primary">Primary</span>
                <span class="badge badge-secondary">Secondary</span>
                <span class="badge badge-secondary">Secondary</span>
                <span class="badge badge-secondary">Secondary</span>
            </p>
        </div>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(model => model.ReportValues[1].NormItem.Order)</th>
                <th>@Html.DisplayNameFor(model => model.ReportValues[1].NormItem.Name)</th>
                @foreach (var property in Model.ReportValues[1].NormItem.Norm.ReportValueAdditionalItem)
                {
                    if (property.HaveControl)
                    {
                        <th>@Html.DisplayNameFor(model => model.ReportValues[1].Control)</th>
                    }
                    if (property.HaveReason)
                    {
                        <th>@Html.DisplayNameFor(model => model.ReportValues[1].Reason)</th>
                    }
                }
                <th>@Html.DisplayNameFor(model => model.ReportValues[1].Status)</th>
                <th>@Html.DisplayNameFor(model => model.ReportValues[1].Note)</th>
            </tr>
        </thead>

        <tbody>
            @{ var parent = Model.ReportValues; }
            @for (int i = 0; i < Model.ReportValues.Count; i++)
            {
                var parentCss = Model.ReportValues[i].NormItem.IsItem ? "" : "bg-light text-dark";
                <tr class="bg-light text-dark @parentCss">
                    <td>@Html.DisplayFor(model => model.ReportValues[i].NormItem.Order).</td>
                    <td>@Html.DisplayFor(model => model.ReportValues[i].NormItem.Name)</td>
                    @foreach (var property in Model.ReportValues[1].NormItem.Norm.ReportValueAdditionalItem)
                    {
                    if (property.HaveControl)
                    {
                    <td>@Html.DisplayFor(model => model.ReportValues[i].Control.Name)</td>
                    }
                    if (property.HaveReason)
                    {
                    <td>@Html.DisplayFor(model => model.ReportValues[i].Reason.Name)</td>
                    }
                    }
                    <td>@Html.HiddenFor(model => model.ReportValues[i].StatusId)</td>
                    <td>@Html.HiddenFor(model => model.ReportValues[i].Note)</td>
                </tr>
                var children = Model.ReportValues[i].Children;
                for (int j = 0; j < children.Count(); j++)
                {
                    <tr>
                        <td>@parent[i].NormItem.Order.@Html.DisplayFor(model => model.ReportValues[i].Children[j].NormItem.Order).</td>
                        <td>@Html.DisplayFor(model => model.ReportValues[i].Children[j].NormItem.Name)</td>

                            @foreach (var property in Model.ReportValues[1].NormItem.Norm.ReportValueAdditionalItem)
                             {
                                 if (property.HaveControl)
                                 {
                                     <td>@Html.DisplayFor(model => model.ReportValues[i].Children[j].Control.Name)</td>
                                 }
                                 if (property.HaveReason)
                                 {
                                     <td>@Html.DisplayFor(model => model.ReportValues[i].Children[j].Reason.Name)</td>
                                 }
                             }
                            <td class=@children[j].Color>@Html.DisplayFor(model => model.ReportValues[i].Children[j].Status.Name)</td>
                            <td>@Html.DisplayFor(model => model.ReportValues[i].Children[j].Note)</td>

                    </tr>
                    var grandChildren = children[j].Children;
                    for (int k = 0; k < grandChildren.Count(); k++)
                    {
                        <tr>
                            <td>@parent[i].NormItem.Order.@children[j].NormItem.Order.@Html.DisplayFor(model => model.ReportValues[i].Children[j].Children[k].NormItem.Order).</td>
                            <td>@Html.DisplayFor(model => model.ReportValues[i].Children[j].Children[k].NormItem.Name)</td>
                            @foreach (var property in Model.ReportValues[1].NormItem.Norm.ReportValueAdditionalItem)
                            {
                                if (property.HaveControl)
                                {
                                    <td>@Html.DisplayFor(model => model.ReportValues[i].Children[j].Children[k].Control.Name)</td>
                                }
                                if (property.HaveReason)
                                {
                                    <td>@Html.DisplayFor(model => model.ReportValues[i].Children[j].Children[k].Reason.Name)</td>
                                }
                            }
                            <td class=@grandChildren[k].Color>@Html.DisplayFor(model => model.ReportValues[i].Children[j].Children[k].Status.Name)</td>
                            <td>@Html.DisplayFor(model => model.ReportValues[i].Children[j].Children[k].Note)</td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
</div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.ReportId }) |
    @Html.ActionLink("Back to List", "Index", new { id = Model.NormId })
</p>
