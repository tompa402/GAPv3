@using GAPv3.ViewModels
@model GAPv3.ViewModels.ReportStatisticViewModel
@{
    ViewBag.Title = "Statistic";
}

<h2>Statistic</h2>
<div>
    <h4>Report</h4>
    <hr />
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">@Html.DisplayFor(model => model.Name)</h5>
            <h6 class="card-subtitle mb-2 text-muted">@Html.DisplayFor(model => model.NormName)</h6>
            <h6 class="card-subtitle mb-2 text-muted">@Html.DisplayFor(model => model.OrganisationName)</h6>
            <p class="card-text">
                Ovi korisnici mogu ažurirati:
                @foreach (var user in Model.AssignedUsers)
                {
                    var badge = user.IsOrganisationLeader ? "badge badge-primary" : "badge badge-secondary";
                    var name = user.Name + " " + user.LastName;
                    <span class="@badge">@name</span>
                }
            </p>
        </div>
        <div class="card-footer">
            Ukupna razina sukladnosti s normom: <span class="badge badge-info">@Model.Popunjenost%</span>
        </div>
    </div>

    <div id="chartContainer" class="container">
    </div>

    <div class="divTable">
        <div class="divTableHeading">
            <div class="divTableRow">
                <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].NormItem.Order)</div>
                <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].NormItem.Name)</div>
                <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].FullImpl)</div>
                <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].PartImpl)</div>
                <div class="divTableHead">@Html.DisplayNameFor(model => model.ReportValues[1].NoImpl)</div>
            </div>
        </div>

        <div class="divTableBody">
            @for (int i = 0; i < Model.ReportValues.Count(); i++)
            {
                @Html.DisplayFor(model => model.ReportValues[i], "_ReportValueStatistic")

                for (int j = 0; j < Model.ReportValues[i].Children.Count(); j++)
                {
                    @Html.DisplayFor(model => model.ReportValues[i].Children[j], "_ReportValueStatistic")

                    for (int k = 0; k < Model.ReportValues[i].Children[j].Children.Count(); k++)
                    {
                        @Html.DisplayFor(model => model.ReportValues[i].Children[j].Children[k], "_ReportValueStatistic")
                    }
                }
            }
        </div>
    </div>
</div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.ReportId }) |
    @Html.ActionLink("Back to List", "Index", new { id = Model.NormId })
</p>

@section Scripts {
    @Styles.Render("~/Content/HighCharts-css")
    @Scripts.Render("~/bundles/HighCharts-js")

    <script type="text/javascript">
        var charts = @Html.Raw(Json.Encode(Model.ChartViewModels));

        $(document).ready(function () {
            console.log("ready!");
            var chartContainer = $('#chartContainer');
            for (var i = 0; i < charts.length; i++) {
                var newChartId = "chart" + i;
                $("<div style='float: left' class='col-md-4' id='" + newChartId + "'></div>").appendTo(chartContainer);
                createChart(charts[i], newChartId);
            }
        });

        function createChart(chart, containerId) {
            Highcharts.chart(containerId, {
                chart: {
                    type: 'column'
                },
                title: {
                    text: chart.TitleParentName
                },
                xAxis: {
                    categories: chart.CategoriesNormItemName
                },
                yAxis: {
                    min: 0,
                    title: {
                        text: 'Total (in percent)'
                    }
                },
                tooltip: {
                    pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>',
                    shared: true
                },
                plotOptions: {
                    column: {
                        stacking: 'percent'
                    }
                },
                series: [{
                    name: chart.ColumnSeriesImplName,
                    data: chart.ColumnSeriesImplData
                }, {
                    name: chart.ColumnSeriesPartImplName,
                    data: chart.ColumnSeriesPartImplData
                }, {
                    name: chart.ColumnSeriesNoImplName,
                    data: chart.ColumnSeriesNoImplData
                }]
            });
        };
    </script>
}
